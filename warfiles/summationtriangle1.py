"""
aij = 2j + i + 1 where 0 <= j <= i <=n

side triangle element is n + 1

n + 1 = 2j + i + 1

Definitions:
Permutation Ascent
p = {a_1, a_2, ...} - let this represent a permutation

i represents a permutation ascent so IF a_i < a_i+1

EX: permutation {1, 2, 3, 4} is composed of three ascents - {1, 2}, {2, 3}, and {3, 4}

The number of permutations of length _n having ^k ascents is given by the Eulerian number |n/k|

The total number of ascents in all permutations of order _n is: a_n = 1/2(n-1)n!

Connection between permutation ascents and permutation runs (set of ascending sequences in a permutation)

|n/k| = a(n, k + 1)

polynomial - a mathematical expression involving a sum of powers in one or more variables multiplied by coefficients

a_nx^n + ... a_2x^2 + a_1x + a_0

Hypergeometric Series:
A series for which c_0 = 1 and the ratio of consecutive terms is a rational function of the summation index k.

C_k+1 / C_k = P(k) / C(k) 

P(k) and C(k) are polynomials - C_k is called a hypergeometric term

The functions generated by a hypergeometric series are called hypergeometric functions - if completely factored can be represenented

C_k+1 / C_k = P(k) / C(k) = (k + a_1)(k + a_2)...(k + a_p) / (k + b_1)(k + b_2)...(k + b_1)(k + 1)


2(n+1) + (n + 1) + 1
2*0 + 0 + 1 = 1
2*1 + 1 

Eulers Number Triangle : Definition:

Triangle of numbers A_n,k:
A_n,1 = A_n,n = 1

recurrence relation:
A_n+1,k = kA_n,k + (n + 2 - k)A_n,k-1


"""
def get_sum(n):
    if n == 0:
        return 1
    else:
        line = n + 1
        count = 0
        sum = 0
        while line:
            sum += (line * (line + 1)/2) + (3 * count * line)
            line -= 1
            count += 1
        return sum


# First line will always be n+1 (n * (n + 1)/2)
# rectangle

"""

issue : too slow, times out

options: change looping structure or recursion with functools.cache?
recurse through i, j 

1. while loops with an if expression to alternate between incrementing j and i for each turn
"""

def makethetriangle(n):
    j, i = 0, 0
    equation = 2*row + col + 1


if __name__ == "__main__":
    import test
    tbin = [0, 1, 2, 3]
    ans = [1, 7, 22, 50]

    print(get_sum(2))
    # for i in tbin:
    #     print(get_sum(i))







